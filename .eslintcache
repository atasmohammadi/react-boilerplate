[{"/Users/ata/Dev/react-boilerplate/src/reportWebVitals.ts":"1","/Users/ata/Dev/react-boilerplate/src/pages/Home/actions.ts":"2","/Users/ata/Dev/react-boilerplate/src/utils/checkStore.ts":"3","/Users/ata/Dev/react-boilerplate/src/index.tsx":"4","/Users/ata/Dev/react-boilerplate/src/pages/Home/constants.ts":"5","/Users/ata/Dev/react-boilerplate/src/pages/Home/saga.ts":"6","/Users/ata/Dev/react-boilerplate/src/utils/injectSaga.tsx":"7","/Users/ata/Dev/react-boilerplate/src/pages/Home/index.tsx":"8","/Users/ata/Dev/react-boilerplate/src/pages/Home/reducer.ts":"9","/Users/ata/Dev/react-boilerplate/src/pages/index.tsx":"10","/Users/ata/Dev/react-boilerplate/src/utils/sagaInjectors.ts":"11","/Users/ata/Dev/react-boilerplate/src/utils/constants.ts":"12","/Users/ata/Dev/react-boilerplate/src/utils/request.ts":"13","/Users/ata/Dev/react-boilerplate/src/pages/Home/selectors.ts":"14","/Users/ata/Dev/react-boilerplate/src/redux/index.ts":"15"},{"size":425,"mtime":1609871391581,"results":"16","hashOfConfig":"17"},{"size":428,"mtime":1609874318537,"results":"18","hashOfConfig":"17"},{"size":530,"mtime":1609877504815,"results":"19","hashOfConfig":"17"},{"size":955,"mtime":1609873359577,"results":"20","hashOfConfig":"17"},{"size":214,"mtime":1609874325228,"results":"21","hashOfConfig":"17"},{"size":866,"mtime":1609874425478,"results":"22","hashOfConfig":"17"},{"size":1959,"mtime":1609877510459,"results":"23","hashOfConfig":"17"},{"size":1846,"mtime":1609875890418,"results":"24","hashOfConfig":"17"},{"size":1241,"mtime":1609877090970,"results":"25","hashOfConfig":"17"},{"size":858,"mtime":1609876230958,"results":"26","hashOfConfig":"17"},{"size":2629,"mtime":1609877582026,"results":"27","hashOfConfig":"17"},{"size":190,"mtime":1609858974944,"results":"28","hashOfConfig":"17"},{"size":965,"mtime":1609877579565,"results":"29","hashOfConfig":"17"},{"size":905,"mtime":1609877398649,"results":"30","hashOfConfig":"17"},{"size":1559,"mtime":1609877495622,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ckt28m",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ata/Dev/react-boilerplate/src/reportWebVitals.ts",[],"/Users/ata/Dev/react-boilerplate/src/pages/Home/actions.ts",[],["67","68"],"/Users/ata/Dev/react-boilerplate/src/utils/checkStore.ts",[],"/Users/ata/Dev/react-boilerplate/src/index.tsx",[],["69","70"],"/Users/ata/Dev/react-boilerplate/src/pages/Home/constants.ts",[],"/Users/ata/Dev/react-boilerplate/src/pages/Home/saga.ts",[],["71","72"],"/Users/ata/Dev/react-boilerplate/src/utils/injectSaga.tsx",["73","74"],"// @ts-nocheck\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ReactReduxContext } from 'react-redux';\n\nimport getInjectors from './sagaInjectors';\n\n/**\n * Dynamically injects a saga, passes component's props as saga arguments\n *\n * @param {string} key A key of the saga\n * @param {function} saga A root saga that will be injected\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\n * on component mount and never canceled or started again. Another two options:\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\n *   cancelled with `task.cancel()` on component unmount for improved performance,\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\n *\n */\n\n interface Props {\n   key: string,\n   saga: () => void,\n   mode?: string,\n }\n\nexport default ({ key, saga, mode }) => (WrappedComponent) => {\n  class InjectSaga extends React.Component {\n    static WrappedComponent = WrappedComponent;\n\n    static contextType = ReactReduxContext;\n\n    static displayName = `withSaga(${\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n    })`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.injectors = getInjectors(context.store);\n\n      this.injectors.injectSaga(key, { saga, mode }, this.props);\n    }\n\n    componentWillUnmount() {\n      this.injectors.ejectSaga(key);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n\n  return hoistNonReactStatics(InjectSaga, WrappedComponent);\n};\n\nconst useInjectSaga = ({ key, saga, mode }: Props) => {\n  const context = React.useContext(ReactReduxContext);\n  React.useEffect(() => {\n    const injectors = getInjectors(context.store);\n    injectors.injectSaga(key, { saga, mode });\n\n    return () => {\n      injectors.ejectSaga(key);\n    };\n  }, []);\n};\n\nexport { useInjectSaga };\n","/Users/ata/Dev/react-boilerplate/src/pages/Home/index.tsx",["75"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose, Dispatch } from 'redux';\nimport { useInjectSaga } from '../../utils/injectSaga';\nimport type {\n  HomeScreenPropsType,\n  Movie\n} from './types';\nimport * as actions from './actions';\nimport logo from './logo.svg';\nimport './styles.css';\n\nimport * as selectors from './selectors';\nimport saga from './saga';\n\nfunction Home(props: HomeScreenPropsType): React.ReactNode {\n  const { movies, loadMovies } = props;\n  useInjectSaga({ key: 'Home', saga });\n\n  const moviesArray = Object.values(movies)\n\n  // when component mounts\n  React.useEffect(() => {\n    // do side effects here\n    loadMovies();\n  }, []);\n\n  // Render list item ( movie )\n  function renderItem(item: Movie) {\n    return (\n      <li>{item.title}</li>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/Home/index.tsx</code> and save to reload.\n      </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n      </a>\n      </header>\n      <ul>\n        {moviesArray.map(movie => renderItem(movie))}\n      </ul>\n    </div>\n  );\n}\n\nconst mapStateToProps = createStructuredSelector({\n  movies: selectors.makeSelectMovies(),\n  loading: selectors.makeSelectLoading(),\n  error: selectors.makeSelectError(),\n  success: selectors.makeSelectSuccess(),\n});\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n  return {\n    loadMovies: () => dispatch(actions.loadMovies()),\n  };\n}\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(withConnect, React.memo)(Home);\n","/Users/ata/Dev/react-boilerplate/src/pages/Home/reducer.ts",[],"/Users/ata/Dev/react-boilerplate/src/pages/index.tsx",[],"/Users/ata/Dev/react-boilerplate/src/utils/sagaInjectors.ts",[],"/Users/ata/Dev/react-boilerplate/src/utils/constants.ts",[],"/Users/ata/Dev/react-boilerplate/src/utils/request.ts",[],"/Users/ata/Dev/react-boilerplate/src/pages/Home/selectors.ts",[],"/Users/ata/Dev/react-boilerplate/src/redux/index.ts",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"76","replacedBy":"80"},{"ruleId":"78","replacedBy":"81"},{"ruleId":"76","replacedBy":"82"},{"ruleId":"78","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":27,"column":1,"nodeType":"86","endLine":55,"endColumn":3},{"ruleId":"87","severity":1,"message":"88","line":66,"column":6,"nodeType":"89","endLine":66,"endColumn":8,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":27,"column":6,"nodeType":"89","endLine":27,"endColumn":8,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],["93"],["94"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'context.store', 'key', 'mode', and 'saga'. Either include them or remove the dependency array.","ArrayExpression",["95"],"React Hook React.useEffect has a missing dependency: 'loadMovies'. Either include it or remove the dependency array.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [context.store, key, mode, saga]",{"range":"101","text":"102"},"Update the dependencies array to be: [loadMovies]",{"range":"103","text":"104"},[1920,1922],"[context.store, key, mode, saga]",[735,737],"[loadMovies]"]